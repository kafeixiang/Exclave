name: Release Build
on:
  push:
    branches:
      - dev*
    paths:
      - "app/**"
      - "buildSrc/**"
      - "library/**"
      - ".github/workflows/release.yml"
  workflow_dispatch:
    inputs:
      publish:
        description: 'Release (y/n)'
        required: false
      tag:
        description: 'Release Tag'
        required: false
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Checkout Submodule
        run: |
          git submodule update --init library/core
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.5
          cache-dependency-path: "library/core/go.sum"
      - name: Setup Go Mobile
        # https://github.com/golang/mobile/blob/c31d5b91ecc32c0d598b8fe8457d244ca0b4e815/cmd/gomobile/init.go#L83
        run: |
          go install github.com/sagernet/gomobile/cmd/gomobile@v0.1.4
          go install github.com/sagernet/gomobile/cmd/gobind@v0.1.4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'
      - name: Setup Android NDK
        # Pin NDK version for `gomobile`.
        # For `libtermux.so`, NDK version is defined in `library/termux/terminal-emulator/build.gradle.kts`. Always keep them identical.
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
      - name: Native Build
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          ./run lib core
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          path: app/libs/libcore.aar
          name: "LibCore"
      - name: Gradle Cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle.kts') }}
      - name: Gradle Build
        run: |
          ./gradlew :app:downloadAssets
          ./gradlew :app:assembleOssRelease
          APK=$(find app/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname "$APK")
          echo "APK=$APK" >> $GITHUB_ENV
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: ${{ env.APK }}
  publish:
    name: Publish Release
    if: github.event.inputs.publish == 'y' && github.event.inputs.tag != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: APKs
          path: artifacts
      - name: Publish Release
        run: |
          wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_amd64.tar.gz
          tar -xvf ghr.tar.gz
          mv ghr*linux_amd64/ghr .
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          ./ghr -replace -prerelease -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" apks
